/*! Distpicker v2.0.7 | (c) 2014-present Chen Fengyuan | MIT */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('jquery')) :
  typeof define === 'function' && define.amd ? define(['jquery'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.jQuery));
}(this, (function ($) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var $__default = /*#__PURE__*/_interopDefaultLegacy($);

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var DEFAULTS = {
    // Selects the districts automatically.
    // 0 -> Disable autoselect
    // 1 -> Autoselect province only
    // 2 -> Autoselect province and city only
    // 3 -> Autoselect all (province, city and district)
    autoselect: 0,
    // Show placeholder.
    placeholder: true,
    // Select value. Options: 'name' and 'code'
    valueType: 'name',
    // Defines the initial value of province.
    province: '—— 省 ——',
    // Defines the initial value of city.
    city: '—— 市 ——',
    // Defines the initial value of district.
    district: '—— 区 ——'
  };

  var DISTRICTS = 
  {100000: {110000: '01 机械学院', 120000: '02 材料学院', 130000: '03 电气学院', 140000: '05 计算机学院', 150000: '06 土木学院', 160000: '07 环工学院', 170000: '08 水利学院', 180000: '09 化工学院', 190000: '10 矿业学院', 200000: '11 经管学院', 210000: '1201 文法学院', 220000: '1202 外国语学院', 230000: '1203 马克思学院', 240000: '13 体育学院', 250000: '14 数学学院', 260000: '16 软件学院', 270000: '18 生态学学院', 280000: '25 电光学院', 290000: '27 轻纺学院', 300000: '28 艺术学院', 310000: '31 生医学院', 320000: '32 安全学院', 330000: '33 建筑学院', 340000: '34 航空学院', 350000: '36 宗复学院', 360000: '40 化学学院', 370000: '41 物理学院', 380000: '35 伍伦贡学院'}, 110000: {111100: '机械设计制造及其自动化', 111200: '机械电子工程', 111300: '机器人工程', 111400: '车辆工程', 111500: '工程力学', 111600: '机械设计制造及自动化（中外合办）'}, 111100: {111111: '机械2301', 111112: '机械2302', 111113: '机械2303', 111114: '机械2304', 111115: '机械2305', 111116: '机械2306', 111117: '机械2307', 111118: '机械2201', 111119: '机械2202', 111120: '机械2203', 111121: '机械2204', 111122: '机械2205', 111123: '机械2206', 111124: '机械2207', 111125: '机械Z2208', 111126: '机械2101', 111127: '机械2102', 111128: '机械2103', 111129: '机械2104', 111130: '机械2105', 111131: '机械2106', 111132: '机械2107', 111133: '机械2108', 111134: '机械2109', 111135: '机械Z2110', 111136: '机械2001', 111137: '机械2002', 111138: '机械2003', 111139: '机械2004', 111140: '机械2005', 111141: '机械2006', 111142: '机械2007', 111143: '机械2008', 111144: '机械2009', 111145: '机械Z2010'}, 111200: {111211: '机电2301', 111212: '机电2302', 111213: '机电2303', 111214: '机电2304', 111215: '机电2305', 111216: '机电2306', 111217: '机电2201', 111218: '机电2202', 111219: '机电2203', 111220: '机电2204', 111221: '机电2205', 111222: '机电2206', 111223: '机电2101', 111224: '机电2102', 111225: '机电2103', 111226: '机电2104', 111227: '机电2105', 111228: '机电2106', 111229: '机电2107', 111230: '机电2108', 111231: '机电2001', 111232: '机电2002', 111233: '机电2003', 111234: '机电2004', 111235: '机电2005', 111236: '机电2006', 111237: '机电2007', 111238: '机电2008'}, 111300: {111311: '机器人2301', 111312: '机器人2302', 111313: '机器人2201', 111314: '机器人2202', 111315: '机器人2101', 111316: '机器人2102', 111317: '机器人2103', 111318: '机器人S2101', 111319: '机器人2001', 111320: '机器人2002', 111321: '机器人S2001'}, 111400: {111411: '车辆2301', 111412: '车辆2302', 111413: '车辆2303', 111414: '车辆2201', 111415: '车辆2202', 111416: '车辆2203', 111417: '车辆2101', 111418: '车辆2102', 111419: '车辆2103', 111420: '车辆2001', 111421: '车辆2002', 111422: '车辆2003'}, 111500: {111511: '力学2301', 111512: '力学2302', 111513: '力学2303', 111514: '力学2201', 111515: '力学2202', 111516: '力学2203', 111517: '力学2101', 111518: '力学2102', 111519: '力学2103', 111520: '力学S2101', 111521: '力学2001', 111522: '力学2002', 111523: '力学2003'}, 111600: {111611: '机械H2301', 111612: '机械H2302', 111613: '机械H2303', 111614: '机械H2304'}, 120000: {121100: '冶金工程', 121200: '金属材料工程', 121300: '材料成型及控制工程', 121400: '材料科学与工程', 121500: '高分子材料与工程', 121600: '材料科学与工程（先进航空材料）'}, 121100: {121111: '冶金2301', 121112: '冶金2302', 121113: '冶金2303', 121114: '冶金2201', 121115: '冶金2202', 121116: '冶金2203', 121117: '冶金2101', 121118: '冶金2102', 121119: '冶金2103', 121120: '冶金2001', 121121: '冶金2002', 121122: '冶金2003'}, 121200: {121211: '金材2301', 121212: '金材2302', 121213: '金材2201', 121214: '金材2202', 121215: '金材2101', 121216: '金材2102', 121217: '金材2001', 121218: '金材2002'}, 121300: {121311: '成型2301', 121312: '成型2302', 121313: '成型2303', 121314: '成型2304', 121315: '成型2305', 121316: '成型2306', 121317: '成型2307', 121318: '成型2201', 121319: '成型2202', 121320: '成型2203', 121321: '成型2204', 121322: '成型2205', 121323: '成型Z2206', 121324: '成型Z2207', 121325: '成型2101', 121326: '成型2102', 121327: '成型2103', 121328: '成型2104', 121329: '成型2105', 121330: '成型Z2106', 121331: '成型Z2107', 121332: '成型2001', 121333: '成型2002', 121334: '成型2003', 121335: '成型2004', 121336: '成型2005', 121337: '成型Z2006', 121338: '成型Z2007'}, 121400: {121411: '材科2301', 121412: '材科2302', 121413: '材科2303', 121414: '材科2304', 121415: '材科2305', 121416: '材科2201', 121417: '材科2202', 121418: '材科2203', 121419: '材科2204', 121420: '材科2205', 121421: '材科2101', 121422: '材科2102', 121423: '材科2103', 121424: '材科2104', 121425: '材科2105', 121426: '材科2106', 121427: '材科2107', 121428: '材科2108', 121429: '材科S2101', 121430: '材科2001', 121431: '材科2002', 121432: '材科2003', 121433: '材科2004', 121434: '材科2005', 121435: '材科2006', 121436: '材科2007', 121437: '材科2008'}, 121500: {121511: '高材2301', 121512: '高材2302', 121513: '高材2201', 121514: '高材2202'}, 130000: {131100: '能源与动力工程', 131200: '电气工程及其自动化', 131300: '能源互联网工程', 131400: '自动化'}, 131100: {131111: '能源2301', 131112: '能源2302', 131113: '能源2303', 131114: '能源2304', 131115: '能源2201', 131116: '能源2202', 131117: '能源2203', 131118: '能源2204', 131119: '能源2101', 131120: '能源2102', 131121: '能源2103', 131122: '能源2104', 131123: '能源2001', 131124: '能源2002', 131125: '能源2003', 131126: '能源2004'}, 131200: {131211: '电气2301', 131212: '电气2302', 131213: '电气2303', 131214: '电气2304', 131215: '电气2305', 131216: '电气2306', 131217: '电气2307', 131218: '电气2201', 131219: '电气2202', 131220: '电气2203', 131221: '电气2204', 131222: '电气2205', 131223: '电气2206', 131224: '电气2207', 131225: '电气2208', 131226: '电气2101', 131227: '电气2102', 131228: '电气2103', 131229: '电气2104', 131230: '电气2105', 131231: '电气2106', 131232: '电气2107', 131233: '电气2108', 131234: '电气2109', 131235: '电气S2101', 131236: '电气2001', 131237: '电气2002', 131238: '电气2003', 131239: '电气2004', 131240: '电气2005', 131241: '电气2006', 131242: '电气2007', 131243: '电气2008', 131244: '电气S2001'}, 131300: {131311: '能网2301', 131312: '能网2302'}, 131400: {131411: '自动化2301', 131412: '自动化2302', 131413: '自动化2303', 131414: '自动化2304', 131415: '自动化2305', 131416: '自动化2306', 131417: '自动化2201', 131418: '自动化2202', 131419: '自动化2203', 131420: '自动化2204', 131421: '自动化2205', 131422: '自动化2206', 131423: '自动化2101', 131424: '自动化2102', 131425: '自动化2103', 131426: '自动化2104', 131427: '自动化2105', 131428: '自动化2106', 131429: '自动化2001', 131430: '自动化2002', 131431: '自动化2003', 131432: '自动化2004', 131433: '自动化2005', 131434: '自动化2006'}, 140000: {141100: '计算机科学与技术', 141200: '物联网工程', 141300: '网络空间安全', 141400: '区块链工程', 141500: '数据科学与大数据技术', 141600: '人工智能', 141700: '智能医学工程', 141800: '信息安全'}, 141100: {141111: '计算机2301', 141112: '计算机2302', 141113: '计算机2303', 141114: '计算机Z2204', 141115: '计算机2201', 141116: '计算机2202', 141117: '计算机2203', 141118: '计算机Z2105', 141119: '计算机Z2106', 141120: '计算机2101', 141121: '计算机2102', 141122: '计算机2103', 141123: '计算机2104', 141124: '计算机S2101', 141125: '计算机Z2005', 141126: '计算机Z2006', 141127: '计算机2001', 141128: '计算机2002', 141129: '计算机2003', 141130: '计算机2004', 141131: '计算机LY2001', 141132: '计算机LZ2001'}, 141200: {141211: '物联网2301', 141212: '物联网2302', 141213: '物联网2201', 141214: '物联网2202', 141215: '物联网2001', 141216: '物联网2002'}, 141300: {141311: '网安2301', 141312: '网安2302', 141313: '网安2201', 141314: '网安2202'}, 141400: {141411: '区块链2301', 141412: '区块链2302', 141413: '区块链2201', 141414: '区块链2202'}, 141500: {141511: '数科2301', 141512: '数科2302', 141513: '数科2303', 141514: '数科2304', 141515: '数科2201', 141516: '数科2202', 141517: '数科2203', 141518: '数科2204', 141519: '数科2101', 141520: '数科2102', 141521: '数科2103', 141522: '数科2104', 141523: '数科2001', 141524: '数科2002', 141525: '数科2003', 141526: '数科2004'}, 141600: {141611: '智能2301', 141612: '智能2302', 141613: '智能2201', 141614: '智能2202', 141615: '智能2101', 141616: '智能2102', 141617: '智能2001', 141618: '智能2002'}, 141700: {141711: '医工2301', 141712: '医工2201', 141713: '医工2101', 141714: '医工2001'}, 150000: {151100: '土木工程', 151200: '道路桥梁与渡河工程', 151300: '建筑环境与能源应用工程'}, 151100: {151111: '土木2301', 151112: '土木2302', 151113: '土木2303', 151114: '土木2304', 151115: '土木2305', 151116: '土木2201', 151117: '土木2202', 151118: '土木2203', 151119: '土木2204', 151120: '土木2205', 151121: '土木2101', 151122: '土木2102', 151123: '土木2103', 151124: '土木2104', 151125: '土木2105', 151126: '土木2106', 151127: '土木2107', 151128: '土木S2101', 151129: '土木2001', 151130: '土木2002', 151131: '土木2003', 151132: '土木2004', 151133: '土木2005', 151134: '土木2006', 151135: '土木S2001'}, 151200: {151211: '道桥2301', 151212: '道桥2302', 151213: '道桥2201', 151214: '道桥2202', 151215: '道桥2101', 151216: '道桥2102', 151217: '道桥2001', 151218: '道桥2002'}, 151300: {151311: '暖通2301', 151312: '暖通2302', 151313: '暖通2201', 151314: '暖通2202', 151315: '暖通2101', 151316: '暖通2102', 151317: '暖通2103', 151318: '暖通2001', 151319: '暖通2002', 151320: '暖通2003'}, 160000: {161100: '环境工程', 161200: '给排水科学与工程'}, 161100: {161111: '环工2301', 161112: '环工2302', 161113: '环工2303', 161114: '环工2201', 161115: '环工2202', 161116: '环工2203', 161117: '环工2101', 161118: '环工2102', 161119: '环工2103', 161120: '环工2001', 161121: '环工2002', 161122: '环工2003'}, 161200: {161211: '给排水2301', 161212: '给排水2302', 161213: '给排水2303', 161214: '给排水2201', 161215: '给排水2202', 161216: '给排水2203', 161217: '给排水2101', 161218: '给排水2102', 161219: '给排水2001', 161220: '给排水2002'}, 170000: {171100: '水利水电工程', 171200: '农业水利工程', 171300: '水文与水资源工程'}, 171100: {171111: '水工2301', 171112: '水工2302', 171113: '水工2303', 171114: '水工2201', 171115: '水工2202', 171116: '水工2203', 171117: '水工2101', 171118: '水工2102', 171119: '水工2103', 171120: '水工2001', 171121: '水工2002', 171122: '水工2003'}, 171200: {171211: '农水2301', 171212: '农水2302', 171213: '农水2201', 171214: '农水2202', 171215: '农水2101', 171216: '农水2102', 171217: '农水2001', 171218: '农水2002'}, 171300: {171311: '水文2301', 171312: '水文2302', 171313: '水文2303', 171314: '水文2201', 171315: '水文2202', 171316: '水文2203', 171317: '水文2101', 171318: '水文2102', 171319: '水文2103', 171320: '水文2001', 171321: '水文2002', 171322: '水文2003'}, 180000: {181100: '化学工程与工艺', 181200: '过程装备与控制工程', 181300: '精细化工'}, 181100: {181111: '化工2301', 181112: '化工2302', 181113: '化工2303', 181114: '化工2304', 181115: '化工2305', 181116: '化工2306', 181117: '化工2307', 181118: '化工2201', 181119: '化工2202', 181120: '化工2203', 181121: '化工2204', 181122: '化工2205', 181123: '化工Z2206', 181124: '化工2101', 181125: '化工2102', 181126: '化工2103', 181127: '化工2104', 181128: '化工S2101', 181129: '化工Z2105', 181130: '化工Z2106', 181131: '化工2001', 181132: '化工2002', 181133: '化工2003', 181134: '化工2004', 181135: '化工2005', 181136: '化工2006', 181137: '化工S2001', 181138: '化工Z2007'}, 181200: {181211: '过控2301', 181212: '过控2302', 181213: '过控2201', 181214: '过控2202', 181215: '过控2101', 181216: '过控2102', 181217: '过控2001', 181218: '过控2002'}, 181300: {181311: '精化2301', 181312: '精化2201', 181313: '精化2101', 181314: '精化2001'}, 190000: {191100: '矿物加工工程', 191200: '采矿工程', 191300: '城市地下空间工程', 191400: '采矿工程(煤炭智能化)', 191500: '资源勘查工程', 191600: '资源勘查工程(煤及煤层气工程方向)', 191700: '测绘工程', 191800: '地质工程'}, 191100: {191111: '矿物2301', 191112: '矿物2302', 191113: '矿物2303', 191114: '矿物2201', 191115: '矿物2202', 191116: '矿物2203', 191117: '矿物2101', 191118: '矿物2102', 191119: '矿物2103', 191120: '矿物2001', 191121: '矿物2002', 191122: '矿物2003'}, 191200: {191211: '采矿2301', 191212: '采矿2302', 191213: '采矿2303', 191214: '采矿2304', 191215: '采矿2201', 191216: '采矿2202', 191217: '采矿2203', 191218: '采矿2101', 191219: '采矿2102', 191220: '采矿2103', 191221: '采矿2104', 191222: '采矿S2101', 191223: '采矿2001', 191224: '采矿2002', 191225: '采矿2003', 191226: '采矿2004'}, 191300: {191311: '地工2301', 191312: '地工2302', 191313: '地工2303', 191314: '地工2201', 191315: '地工2202', 191316: '地工2203', 191317: '地工2101', 191318: '地工2102', 191319: '地工2103', 191320: '地工2001', 191321: '地工2002', 191322: '地工2003'}, 191400: {191411: '智矿2301', 191412: '智矿2302', 191413: '智矿2201', 191414: '智矿2202', 191415: '智矿2101', 191416: '智矿2102', 191417: '智矿2001', 191418: '智矿2002'}, 191500: {191511: '资勘2301', 191512: '资勘2302', 191513: '资勘2201', 191514: '资勘2202', 191515: '资勘2101', 191516: '资勘2102', 191517: '资勘2103', 191518: '资勘2001', 191519: '资勘2002', 191520: '资勘2003'}, 191600: {191611: '煤层气2301', 191612: '煤层气2201'}, 191700: {191711: '测绘2301', 191712: '测绘2302', 191713: '测绘2303', 191714: '测绘2201', 191715: '测绘2202', 191716: '测绘2203', 191717: '测绘2101', 191718: '测绘2102', 191719: '测绘2103', 191720: '测绘2001', 191721: '测绘2002', 191722: '测绘2003', 191723: '测绘2004'}, 191800: {191811: '地质2301', 191812: '地质2302', 191813: '地质2201', 191814: '地质2202', 191815: '地质2101', 191816: '地质2102', 191817: '地质2001', 191818: '地质2002'}, 200000: {201100: '会计学', 201200: '工程管理', 201300: '物流管理', 201400: '工程管理#', 201500: '国际经济与贸易', 201600: '物流管理（航空物流）'}, 201100: {201111: '会计2301', 201112: '会计2302', 201113: '会计2201', 201114: '会计2202', 201115: '会计2101', 201116: '会计2102', 201117: '会计2103', 201118: '会计2001', 201119: '会计2002', 201120: '会计2003'}, 201200: {201211: '工管2301', 201212: '工管2302', 201213: '工管2201', 201214: '工管2202', 201215: '工管2203', 201216: '工管2101', 201217: '工管2102', 201218: '工管2103', 201219: '工管2001', 201220: '工管2002', 201221: '工管2003'}, 201300: {201311: '物流2301', 201312: '物流2302', 201313: '物流2201', 201314: '物流2202', 201315: '物流2101', 201316: '物流2001'}, 201400: {201411: '工管G2303', 201412: '工管G2204', 201413: '工管G2104', 201414: '工管G2004', 201415: '工管G1903'}, 201500: {201511: '国贸2301', 201512: '国贸2302', 201513: '国贸2201', 201514: '国贸2202', 201515: '国贸2101', 201516: '国贸2102', 201517: '国贸2001', 201518: '国贸2002', 201519: '国贸LZ2001'}, 210000: {211100: '法学', 211200: '行政管理', 211300: '汉语国际教育'}, 211100: {211111: '法学2301', 211112: '法学2302', 211113: '法学2303', 211114: '法学2201', 211115: '法学2202', 211116: '法学2203', 211117: '法学2101', 211118: '法学2102', 211119: '法学2103', 211120: '法学2001', 211121: '法学2002', 211122: '法学2003'}, 211200: {211211: '行政2301', 211212: '行政2302', 211213: '行政2201', 211214: '行政2202', 211215: '行政2101', 211216: '行政2102', 211217: '行政2001', 211218: '行政2002'}, 211300: {211311: '汉教2301', 211312: '汉教2302', 211313: '汉教2201', 211314: '汉教LZ2201', 211315: '汉教2101', 211316: '汉教2001', 211317: '汉教LZ2001'}, 220000: {221100: '英语', 221200: '英语（英日双语方向）', 221300: '英语（英俄双语方向）'}, 221100: {221111: '英语2301', 221112: '英语2302', 221113: '英语2303', 221114: '英语2201', 221115: '英语2202', 221116: '英语2203', 221117: '英语2101', 221118: '英语2102', 221119: '英语2103', 221120: '英语2001', 221121: '英语2002', 221122: '英语2003'}, 221200: {221211: '英日2301', 221212: '英日2201', 221213: '英日2101', 221214: '英日2001'}, 221300: {221311: '英俄2301', 221312: '英俄2201', 221313: '英俄2101', 221314: '英俄2001'}, 230000: {231100: '思想政治教育'}, 231100: {231111: '思政2301', 231112: '思政2302', 231113: '思政2303', 231114: '思政2201', 231115: '思政2202', 231116: '思政2203', 231117: '思政2101', 231118: '思政2102', 231119: '思政2103', 231120: '思政2001', 231121: '思政2002', 231122: '思政2003'}, 240000: {241100: '体育教育', 241200: '体育教育（赛马方向）', 241300: '运动训练'}, 241100: {241111: '体育2301', 241112: '体育2302', 241113: '体育2303', 241114: '体育2304', 241115: '体育2201', 241116: '体育2202', 241117: '体育2203', 241118: '体育2204', 241119: '体育2101', 241120: '体育2102', 241121: '体育2103', 241122: '体育2104', 241123: '体育2001', 241124: '体育2002', 241125: '体育2003', 241126: '体育2004'}, 241200: {241211: '赛马2301', 241212: '赛马2201', 241213: '赛马2101', 241214: '赛马2001'}, 241300: {241311: '运训2301', 241312: '运训2302', 241313: '运训2201', 241314: '运训2202'}, 250000: {251100: '数学与应用数学', 251200: '信息与计算科学', 251300: '统计学'}, 251100: {251111: '数学2301', 251112: '数学2201', 251113: '数学2101', 251114: '数学S2101', 251115: '数学2001'}, 251200: {251211: '信计2301', 251212: '信计2302', 251213: '信计2201', 251214: '信计2202', 251215: '信计2101', 251216: '信计2102', 251217: '信计2001', 251218: '信计2002', 251219: '信计2003', 251220: '信计2004'}, 251300: {251311: '统计2301', 251312: '统计2302', 251313: '统计2201', 251314: '统计2202', 251315: '统计2101', 251316: '统计2102'}, 260000: {261100: '软件工程'}, 261100: {261111: '软件2301', 261112: '软件2302', 261113: '软件2303', 261114: '软件2304', 261115: '软件2305', 261116: '软件2306', 261117: '软件2307', 261118: '软件2308', 261119: '软件2309', 261120: '软件2310', 261121: '软件2311', 261122: '软件2312', 261123: '软件2313', 261124: '软件2314', 261125: '软件2315', 261126: '软件2316', 261127: '软件2317', 261128: '软件2318', 261129: '软件2319', 261130: '软件2320', 261131: '软件2321', 261132: '软件2322', 261133: '软件2323', 261134: '软件2324', 261135: '软件2325', 261136: '软件2326', 261137: '软件2327', 261138: '软件2328', 261139: '软件2329', 261140: '软件2330', 261141: '软件2331', 261142: '软件2332', 261143: '软件2333', 261144: '软件2334', 261145: '软件2335', 261146: '软件2336', 261147: '软件2337', 261148: '软件2338', 261149: '软件2339', 261150: '软件2340', 261151: '软件2341', 261152: '软件2342', 261153: '软件2343', 261154: '软件2344', 261155: '软件2345', 261156: '软件2346', 261157: '软件2347', 261158: '软件2348', 261159: '软件2201', 261160: '软件2202', 261161: '软件2203', 261162: '软件2204', 261163: '软件2205', 261164: '软件2206', 261165: '软件2207', 261166: '软件2208', 261167: '软件2209', 261168: '软件2210', 261169: '软件2211', 261170: '软件2212', 261171: '软件2213', 261172: '软件2214', 261173: '软件2215', 261174: '软件2216', 261175: '软件2217', 261176: '软件2218', 261177: '软件2219', 261178: '软件2220', 261179: '软件2221', 261180: '软件2222', 261181: '软件2223', 261182: '软件2224', 261183: '软件2225', 261184: '软件2226', 261185: '软件2227', 261186: '软件2228', 261187: '软件2229', 261188: '软件2230', 261189: '软件2231', 261190: '软件2232', 261191: '软件2233', 261192: '软件2234', 261193: '软件2235', 261194: '软件2236', 261195: '软件2237', 261196: '软件2238', 261197: '软件2239', 261198: '软件2240', 261199: '软件2241', 2611100: '软件2242', 2611101: '软件2243', 2611102: '软件2244', 2611103: '软件2245', 2611104: '软件2246', 2611105: '软件2247', 2611106: '软件2248', 2611107: '软件2101', 2611108: '软件2102', 2611109: '软件2103', 2611110: '软件2104', 2611111: '软件2105', 2611112: '软件2106', 2611113: '软件2107', 2611114: '软件2108', 2611115: '软件2109', 2611116: '软件2110', 2611117: '软件2111', 2611118: '软件2112', 2611119: '软件2113', 2611120: '软件2114', 2611121: '软件2115', 2611122: '软件2116', 2611123: '软件2117', 2611124: '软件2118', 2611125: '软件2119', 2611126: '软件2120', 2611127: '软件2121', 2611128: '软件2122', 2611129: '软件2123', 2611130: '软件2124', 2611131: '软件2125', 2611132: '软件2126', 2611133: '软件2127', 2611134: '软件2128', 2611135: '软件2129', 2611136: '软件2130', 2611137: '软件2131', 2611138: '软件2132', 2611139: '软件2133', 2611140: '软件2134', 2611141: '软件2135', 2611142: '软件2136', 2611143: '软件2137', 2611144: '软件2138', 2611145: '软件2139', 2611146: '软件2140', 2611147: '软件2001', 2611148: '软件2002', 2611149: '软件2003', 2611150: '软件2004', 2611151: '软件2005', 2611152: '软件2006', 2611153: '软件2007', 2611154: '软件2008', 2611155: '软件2009', 2611156: '软件2010', 2611157: '软件2011', 2611158: '软件2012', 2611159: '软件2013', 2611160: '软件2014', 2611161: '软件2015', 2611162: '软件2016', 2611163: '软件2017', 2611164: '软件2018', 2611165: '软件2019', 2611166: '软件2020', 2611167: '软件2021', 2611168: '软件2022', 2611169: '软件2023', 2611170: '软件2024', 2611171: '软件2025', 2611172: '软件2026', 2611173: '软件2027', 2611174: '软件2028', 2611175: '软件2029', 2611176: '软件2030', 2611177: '软件2031', 2611178: '软件2032', 2611179: '软件2033', 2611180: '软件2034', 2611181: '软件2035', 2611182: '软件2036'}, 270000: {271100: '生态学'}, 271100: {271111: '生态2301', 271112: '生态2302'}, 280000: {281100: '电子信息工程', 281200: '通信工程', 281300: '电子科学与技术', 281400: '智能测控工程', 281500: '光电信息科学与工程', 281600: '智能感知工程', 281700: '集成电路设计与集成系统', 281800: '电子科学与技术（集成电路）', 281900: '测控技术与仪器'}, 281100: {281111: '信息2301', 281112: '信息2302', 281113: '信息2201', 281114: '信息2202', 281115: '信息2101', 281116: '信息2102', 281117: '信息2001', 281118: '信息2002', 281119: '信息2003'}, 281200: {281211: '通信2301', 281212: '通信2302', 281213: '通信2201', 281214: '通信2202', 281215: '通信2101', 281216: '通信2102', 281217: '通信2001', 281218: '通信2002'}, 281300: {281311: '电科2301', 281312: '电科2201', 281313: '电科2101', 281314: '电科2001', 281315: '电科2002'}, 281400: {281411: '智测2301', 281412: '智测2302', 281413: '智测2201', 281414: '智测2202'}, 281500: {281511: '光信息2301', 281512: '光信息2302', 281513: '光信息2303', 281514: '光信息2304', 281515: '光信息2201', 281516: '光信息2202', 281517: '光信息2203', 281518: '光信息2204', 281519: '光信息2101', 281520: '光信息2102', 281521: '光信息2103', 281522: '光信息2104', 281523: '光信息2001', 281524: '光信息2002', 281525: '光信息2003', 281526: '光信息2004'}, 281600: {281611: '感知2301', 281612: '感知2302', 281613: '感知2201', 281614: '感知2202', 281615: '感知2101', 281616: '感知2102'}, 281700: {281711: '集电2301', 281712: '集电2302'}, 290000: {291100: '纺织工程', 291200: '服装与服饰设计', 291300: '表演', 291400: '服装与服饰设计（服装设计与表演方向）'}, 291100: {291111: '纺织2301', 291112: '纺织2302', 291113: '纺织2201', 291114: '纺织2202', 291115: '纺织2101', 291116: '纺织2102', 291117: '纺织2001', 291118: '纺织2002'}, 291200: {291211: '服设2301', 291212: '服设2201', 291213: '服设2202', 291214: '服设2101', 291215: '服设2102', 291216: '服设2001', 291217: '服设2002'}, 291300: {291311: '表演2301', 291312: '表演2302'}, 300000: {301100: '环境设计', 301200: '视觉传达设计', 301300: '数字媒体艺术', 301400: '绘画', 301500: '工艺美术', 301600: '文物保护与修复', 301700: '音乐表演', 301800: '舞蹈表演', 301900: '文物保护技术'}, 301100: {301111: '环艺2301', 301112: '环艺2302', 301113: '环艺2201', 301114: '环艺2202', 301115: '环艺2203', 301116: '环艺2101', 301117: '环艺2102', 301118: '环艺2103', 301119: '环艺2001', 301120: '环艺2002', 301121: '环艺2003'}, 301200: {301211: '视觉2301', 301212: '视觉2302', 301213: '视觉2201', 301214: '视觉2202', 301215: '视觉2203', 301216: '视觉2101', 301217: '视觉2102', 301218: '视觉2103', 301219: '视觉2001', 301220: '视觉2002', 301221: '视觉2003'}, 301300: {301311: '媒体2301', 301312: '媒体2302', 301313: '媒体2201', 301314: '媒体2202', 301315: '媒体2101', 301316: '媒体2102', 301317: '媒体2001', 301318: '媒体2002'}, 301400: {301411: '国画2301', 301412: '油画2301', 301413: '国画2201', 301414: '油画2201', 301415: '国画2101', 301416: '国画2102', 301417: '油画2101', 301418: '国画2001', 301419: '国画2002', 301420: '油画2001', 301421: '油画2002'}, 301500: {301511: '工艺2301', 301512: '工艺2302', 301513: '工艺2201', 301514: '工艺2202', 301515: '工艺2101', 301516: '工艺2102', 301517: '工艺2001', 301518: '工艺2002', 301519: '工艺2003'}, 301600: {301611: '文保2301', 301612: '文保2101', 301613: '文保2102'}, 301700: {301711: '音表2301', 301712: '音表2302', 301713: '音表2201', 301714: '音表2202', 301715: '音表2101'}, 301800: {301811: '舞表2301', 301812: '舞表2201', 301813: '舞表2101'}, 310000: {311100: '制药工程', 311200: '生物医学工程'}, 311100: {311111: '制药2301', 311112: '制药2302', 311113: '制药2303', 311114: '制药2201', 311115: '制药2202', 311116: '制药2203', 311117: '制药2101', 311118: '制药2102', 311119: '制药2103', 311120: '制药2001', 311121: '制药2002', 311122: '制药2003'}, 311200: {311211: '生医2301', 311212: '生医2302', 311213: '生医2303', 311214: '生医2201', 311215: '生医2202', 311216: '生医2203', 311217: '生医2101', 311218: '生医2102', 311219: '生医2103', 311220: '生医2001', 311221: '生医2002', 311222: '生医2003'}, 320000: {321100: '安全工程', 321200: '应急技术与管理'}, 321100: {321111: '安全2301', 321112: '安全2302', 321113: '安全2303', 321114: '安全2304', 321115: '安全2305', 321116: '安全2201', 321117: '安全2202', 321118: '安全2203', 321119: '安全2204', 321120: '安全Z2205', 321121: '安全2101', 321122: '安全2102', 321123: '安全2103', 321124: '安全2104', 321125: '安全S2101', 321126: '安全Z2105', 321127: '安全2001', 321128: '安全2002', 321129: '安全2003', 321130: '安全2004', 321131: '安全Z2005'}, 321200: {321211: '应急2301', 321212: '应急2302', 321213: '应急2201', 321214: '应急2202', 321215: '应急2101', 321216: '应急2102', 321217: '应急2001', 321218: '应急2002'}, 330000: {331100: '工业设计', 331200: '建筑学', 331300: '城乡规划'}, 331100: {331111: '工设2301', 331112: '工设2302', 331113: '工设2201', 331114: '工设2202', 331115: '工设2101', 331116: '工设2102', 331117: '工设2001', 331118: '工设2002'}, 331200: {331211: '建筑学2301', 331212: '建筑学2302', 331213: '建筑学2303', 331214: '建筑学2201', 331215: '建筑学2202', 331216: '建筑学2203', 331217: '建筑学2101', 331218: '建筑学2102', 331219: '建筑学2103', 331220: '建筑学2001', 331221: '建筑学2002', 331222: '建筑学2003', 331223: '建筑学1901', 331224: '建筑学1902', 331225: '建筑学1903'}, 331300: {331311: '城规2301', 331312: '城规2302', 331313: '城规2201', 331314: '城规2202', 331315: '城规2101', 331316: '城规2102', 331317: '城规2001', 331318: '城规2002', 331319: '城规1901', 331320: '城规1902'}, 340000: {341100: '飞行器设计与工程', 341200: '飞行技术'}, 341100: {341111: '飞设2301', 341112: '飞设2302', 341113: '飞设2303', 341114: '飞设2201', 341115: '飞设2202', 341116: '飞设2203', 341117: '飞设2101', 341118: '飞设2102', 341119: '飞设2103', 341120: '飞设2001', 341121: '飞设2002'}, 341200: {341211: '飞行2301'}, 350000: {351100: '试验班'}, 351100: {351111: '试验2301', 351112: '试验2302', 351113: '试验2303', 351114: '试验2304', 351115: '试验2201', 351116: '试验2202', 351117: '试验2203', 351118: '试验2204'}, 360000: {361100: '应用化学', 361200: '化学'}, 361100: {361111: '应化2301', 361112: '应化2302', 361113: '应化2201', 361114: '应化2202', 361115: '应化2101', 361116: '应化2102'}, 361200: {361211: '化学2301'}, 370000: {371100: '应用物理学', 371200: '物理学', 371300: '应用物理学（微电子）'}, 371100: {371111: '应物2301', 371112: '应物2302', 371113: '应物2201', 371114: '应物2202', 371115: '应物2101', 371116: '应物2001', 371117: '应物2002'}, 371200: {371211: '物理2301'}, 201600: {201611: '航物2201', 201612: '航物2101', 201613: '航物2001'}, 281800: {281811: '集电2201', 281812: '集电2101'}, 291400: {291411: '服表2201', 291412: '服表2101', 291413: '服表2001'}, 380000: {381100: '机械设计制造及其自动化（中外合办）'}, 381100: {381111: '机械H2201', 381112: '机械H2202', 381113: '机械H2203', 381114: '机械H2204', 381115: '机械H2101', 381116: '机械H2102', 381117: '机械H2103', 381118: '机械H2104', 381119: '机械H2001', 381120: '机械H2002', 381121: '机械H2003', 381122: '机械H2004'}, 141800: {141811: '信安2101', 141812: '信安2102'}, 281900: {281911: '测控2101', 281912: '测控2102'}, 371300: {371311: '微电子2101'}, 121600: {121611: '航空2001'}, 301900: {301911: '文物2001', 301912: '文物2002'}}  
  
  
  ;

  var WINDOW = typeof window !== 'undefined' ? window : {};
  var NAMESPACE = 'distpicker';
  var EVENT_CHANGE = 'change';

  var DEFAULT_CODE = 100000;
  var PROVINCE = 'province';
  var CITY = 'city';
  var DISTRICT = 'district';

  var Distpicker = /*#__PURE__*/function () {
    function Distpicker(element, options) {
      _classCallCheck(this, Distpicker);

      this.$element = $__default['default'](element);
      this.options = $__default['default'].extend({}, DEFAULTS, $__default['default'].isPlainObject(options) && options);
      this.placeholders = $__default['default'].extend({}, DEFAULTS);
      this.ready = false;
      this.init();
    }

    _createClass(Distpicker, [{
      key: "init",
      value: function init() {
        var _this = this;

        var options = this.options;
        var $selects = this.$element.find('select');
        var length = $selects.length;
        var data = {};
        $selects.each(function (i, select) {
          return $__default['default'].extend(data, $__default['default'](select).data());
        });
        $__default['default'].each([PROVINCE, CITY, DISTRICT], function (i, type) {
          if (data[type]) {
            options[type] = data[type];
            _this["$".concat(type)] = $selects.filter("[data-".concat(type, "]"));
          } else {
            _this["$".concat(type)] = length > i ? $selects.eq(i) : null;
          }
        });
        this.bind(); // Reset all the selects (after event binding)

        this.reset();
        this.ready = true;
      }
    }, {
      key: "bind",
      value: function bind() {
        var _this2 = this;

        if (this.$province) {
          this.$province.on(EVENT_CHANGE, this.onChangeProvince = $__default['default'].proxy(function () {
            _this2.output(CITY);

            _this2.output(DISTRICT, true);
          }, this));
        }

        if (this.$city) {
          this.$city.on(EVENT_CHANGE, this.onChangeCity = $__default['default'].proxy(function () {
            return _this2.output(DISTRICT, true);
          }, this));
        }
      }
    }, {
      key: "unbind",
      value: function unbind() {
        if (this.$province) {
          this.$province.off(EVENT_CHANGE, this.onChangeProvince);
        }

        if (this.$city) {
          this.$city.off(EVENT_CHANGE, this.onChangeCity);
        }
      }
    }, {
      key: "output",
      value: function output(type) {
        var triggerEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var options = this.options,
            placeholders = this.placeholders;
        var $select = this["$".concat(type)];

        if (!$select || !$select.length) {
          return;
        }

        var code;

        switch (type) {
          case PROVINCE:
            code = DEFAULT_CODE;
            break;

          case CITY:
            code = this.$province && (this.$province.find(':selected').data('code') || '');
            break;

          case DISTRICT:
            code = this.$city && (this.$city.find(':selected').data('code') || '');
            break;
        }

        var districts = this.getDistricts(code);
        var value = options[type];
        var data = [];
        var matched = false;

        if ($__default['default'].isPlainObject(districts)) {
          $__default['default'].each(districts, function (i, name) {
            var selected = name === value || i === String(value);

            if (selected) {
              matched = true;
            }

            data.push({
              name: name,
              selected: selected,
              code: i,
              value: options.valueType === 'name' ? name : i
            });
          });
        }

        if (!matched) {
          var autoselect = options.autoselect || options.autoSelect;

          if (data.length && (type === PROVINCE && autoselect > 0 || type === CITY && autoselect > 1 || type === DISTRICT && autoselect > 2)) {
            data[0].selected = true;
          } // Save the unmatched value as a placeholder at the first output


          if (!this.ready && value) {
            placeholders[type] = value;
          }
        } // Add placeholder option


        if (options.placeholder) {
          data.unshift({
            code: '',
            name: placeholders[type],
            value: '',
            selected: false
          });
        }

        if (data.length) {
          $select.html(this.getList(data));
        } else {
          $select.empty();
        }

        if (triggerEvent) {
          $select.trigger(EVENT_CHANGE);
        }
      } // eslint-disable-next-line class-methods-use-this

    }, {
      key: "getList",
      value: function getList(data) {
        var list = [];
        $__default['default'].each(data, function (i, n) {
          var attrs = ["data-code=\"".concat(n.code, "\""), "data-text=\"".concat(n.name, "\""), "value=\"".concat(n.value, "\"")];

          if (n.selected) {
            attrs.push('selected');
          }

          list.push("<option ".concat(attrs.join(' '), ">").concat(n.name, "</option>"));
        });
        return list.join('');
      } // eslint-disable-next-line class-methods-use-this

    }, {
      key: "getDistricts",
      value: function getDistricts() {
        var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_CODE;
        return DISTRICTS[code] || null;
      }
    }, {
      key: "reset",
      value: function reset(deep) {
        if (!deep) {
          this.output(PROVINCE);
          this.output(CITY);
          this.output(DISTRICT);
        } else if (this.$province) {
          this.$province.find(':first').prop('selected', true).end().trigger(EVENT_CHANGE);
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.unbind();
      }
    }], [{
      key: "setDefaults",
      value: function setDefaults(options) {
        $__default['default'].extend(DEFAULTS, $__default['default'].isPlainObject(options) && options);
      }
    }]);

    return Distpicker;
  }();

  if ($__default['default'].fn) {
    var AnotherDistpicker = $__default['default'].fn.distpicker;

    $__default['default'].fn.distpicker = function jQueryDistpicker(option) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var result;
      this.each(function (i, element) {
        var $element = $__default['default'](element);
        var isDestroy = option === 'destroy';
        var distpicker = $element.data(NAMESPACE);

        if (!distpicker) {
          if (isDestroy) {
            return;
          }

          var options = $__default['default'].extend({}, $element.data(), $__default['default'].isPlainObject(option) && option);
          distpicker = new Distpicker(element, options);
          $element.data(NAMESPACE, distpicker);
        }

        if (typeof option === 'string') {
          var fn = distpicker[option];

          if ($__default['default'].isFunction(fn)) {
            result = fn.apply(distpicker, args);

            if (isDestroy) {
              $element.removeData(NAMESPACE);
            }
          }
        }
      });
      return typeof result === 'undefined' ? this : result;
    };

    $__default['default'].fn.distpicker.Constructor = Distpicker;
    $__default['default'].fn.distpicker.setDefaults = Distpicker.setDefaults;

    $__default['default'].fn.distpicker.noConflict = function noConflict() {
      $__default['default'].fn.distpicker = AnotherDistpicker;
      return this;
    };
  }

  if (WINDOW.document) {
    $__default['default'](function () {
      $__default['default']("[data-toggle=\"".concat(NAMESPACE, "\"]")).distpicker();
    });
  }

})));
